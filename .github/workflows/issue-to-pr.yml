name: Issue to Terraform PR

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write
  issues: read

jobs:
  generate-terraform-pr:
    if: contains(github.event.issue.title, '[Terraform]')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pyyaml

      - name: Parse Issue & Generate Terraform Config
        id: generate
        run: |
          ISSUE_BODY=$(jq -r '.issue.body' "$GITHUB_EVENT_PATH")
          
          ENV=$(echo "$ISSUE_BODY" | grep '^환경:' | cut -d: -f2 | xargs)
          LOC=$(echo "$ISSUE_BODY" | grep '^위치:' | cut -d: -f2 | xargs)
          RG=$(echo "$ISSUE_BODY" | grep '^리소스 그룹:' | cut -d: -f2 | xargs)
          VNET=$(echo "$ISSUE_BODY" | grep '^VNet:' | cut -d: -f2 | xargs)
          CIDR=$(echo "$ISSUE_BODY" | grep '^CIDR:' | cut -d: -f2- | xargs)
          VM_NAME=$(echo "$ISSUE_BODY" | grep '^VM 이름:' | cut -d: -f2 | xargs)
          VM_SIZE=$(echo "$ISSUE_BODY" | grep '^VM 크기:' | cut -d: -f2 | xargs)
          ADMIN=$(echo "$ISSUE_BODY" | grep '^관리자 계정:' | cut -d: -f2 | xargs)
          SERVICE_NAME=$(echo "$ISSUE_BODY" | grep '^서비스명:' | cut -d: -f2 | xargs)
          TEAM_NAME=$(echo "$ISSUE_BODY" | grep '^팀명:' | cut -d: -f2 | xargs)

          TEAM_DIR="teams/${ENV}-${VM_NAME}"
          mkdir -p "$TEAM_DIR"

          cat <<EOF > "$TEAM_DIR/terraform.tfvars"
                        location       = "${LOC}"
                        resource_group = "${RG}"
                        vnet_name      = "${VNET}"
                        address_space  = ${CIDR}
                        vm_name        = "${VM_NAME}"
                        vm_size        = "${VM_SIZE}"
                        admin_username = "${ADMIN}"
                        service_name   = "${SERVICE_NAME}"
                        team_name      = "${TEAM_NAME}"
                        EOF

                                cat <<EOF > "$TEAM_DIR/main.tf"
                        module "infra" {
                        source           = "../../modules/vm"
                        location         = var.location
                        resource_group   = var.resource_group
                        vnet_name        = var.vnet_name
                        address_space    = var.address_space
                        vm_name          = var.vm_name
                        vm_size          = var.vm_size
                        admin_username   = var.admin_username
                        service_name     = var.service_name
                        team_name        = var.team_name
                        }
                EOF

          echo "team_dir=${TEAM_DIR}" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "feat: add terraform config for ${{ steps.generate.outputs.team_dir }}"
          branch: "issue-${{ github.event.issue.number }}"
          title: "Infra 요청 자동화 PR: #${{ github.event.issue.number }}"
          body: |
            이 PR은 이슈 #${{ github.event.issue.number }}을 기반으로 생성된 자동 PR입니다.
            - 환경: ${{ github.event.issue.title }}
            - 디렉토리: `${{ steps.generate.outputs.team_dir }}`
          labels: terraform
